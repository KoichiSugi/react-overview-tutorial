{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","Form","initialState","state","handleChange","event","target","value","setState","submitForm","handleSubmit","this","htmlFor","type","id","onChange","Component","App","characters","filter","character","i","className","ReactDOM","render","document","getElementById"],"mappings":"4OAEMA,EAAc,WAClB,OACE,+BACE,4BACE,oCACA,sCAMFC,EAAY,SAACC,GAEjB,IAAMC,EAAOD,EAAME,cAAcC,KAAI,SAACC,EAAKC,GACzC,OACE,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,MACT,4BAAKH,EAAII,KACT,4BACE,4BAAQC,QAAS,kBAAMT,EAAMU,gBAAgBL,KAA7C,eAKR,OAAO,+BAAQJ,IA4BFU,EAxBD,SAACX,GAAW,IAChBE,EAAmCF,EAAnCE,cAAeQ,EAAoBV,EAApBU,gBAEvB,OACE,+BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,cAAeA,EAAeQ,gBAAiBA,M,OCiBjDE,E,4MA9CbC,aAAe,CACbN,KAAM,GACNC,IAAK,I,EAEPM,MAAQ,EAAKD,a,EAGbE,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBV,EADgB,EAChBA,KAAMW,EADU,EACVA,MAEd,EAAKC,SAAL,eACGZ,EAAOW,K,EAGZE,WAAa,WACX,EAAKpB,MAAMqB,aAAa,EAAKP,OAC7B,EAAKK,SAAS,EAAKN,e,uDAGX,IAAD,EACeS,KAAKR,MAAnBP,EADD,EACCA,KAAMC,EADP,EACOA,IAEd,OACE,8BACE,2BAAOe,QAAQ,QAAf,QACA,2BACEC,KAAK,OACLjB,KAAK,OACLkB,GAAG,OACHP,MAAOX,EACPmB,SAAUJ,KAAKP,eAEjB,2BAAOQ,QAAQ,OAAf,OACA,2BACEC,KAAK,OACLjB,KAAK,MACLkB,GAAG,MACHP,MAAOV,EACPkB,SAAUJ,KAAKP,eACjB,2BAAOS,KAAK,SAASN,MAAM,SAAST,QAASa,KAAKF,kB,GAzCvCO,aCqCJC,E,4MArCbd,MAAQ,CACNe,WAAY,I,EAGdnB,gBAAkB,SAAAL,GAAU,IAClBwB,EAAe,EAAKf,MAApBe,WAER,EAAKV,SAAS,CAEZU,WAAYA,EAAWC,QAAO,SAACC,EAAWC,GACxC,OAAOA,IAAM3B,Q,EAQnBgB,aAAe,SAACU,GACd,EAAKZ,SAAS,CAAEU,WAAW,GAAD,mBAAM,EAAKf,MAAMe,YAAjB,CAA6BE,O,uDAI/C,IACAF,EAAeP,KAAKR,MAApBe,WACR,OACE,yBAAKI,UAAU,aACb,kBAAC,EAAD,CAAO/B,cAAe2B,EAAYnB,gBAAiBY,KAAKZ,kBACxD,kBAAC,EAAD,CAAMW,aAAcC,KAAKD,oB,GA7BfM,a,MCElBO,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.923bc6e5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TableHeader = () => {\n  return (\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Job</th>\n      </tr>\n    </thead>\n  )\n}\n\nconst TableBody = (props) => {\n  //map method creates a new array by calling a provided function on every element in the calling array\n  const rows = props.characterData.map((row, index) => {\n    return (\n      <tr key={index}>\n        <td>{row.name}</td>\n        <td>{row.job}</td>\n        <td>\n          <button onClick={() => props.removeCharacter(index)}>Delete</button>\n        </td>\n      </tr>\n    )\n  })\n  return <tbody>{rows}</tbody>\n\n}\n\nconst Table = (props) => {\n  const { characterData, removeCharacter } = props\n\n  return (\n    <table>\n      <TableHeader />\n      <TableBody characterData={characterData} removeCharacter={removeCharacter} />\n    </table>\n  )\n}\n\n// class Table extends Component {\n//   render() {\n//     const { characterData } = this.props\n\n//     return (\n//       <table>\n//         <TableHeader />\n//         <TableBody characterData={characterData} />\n//       </table>\n//     )\n//   }\n// }\n\nexport default Table","import React, { Component } from 'react'\n\n//purpose of this form is to update state of form in response to a change in form\n//when a user submits, all that data will pass to the app state, which will then update the table\n\nclass Form extends Component {\n  //set initial state of the form to be an object with empty properties and assign that initial state to this.state\n  initialState = {\n    name: '',\n    job: '',\n  }\n  state = this.initialState\n\n  //this runs every time a change is made to an input\n  handleChange = (event) => {\n    const { name, value } = event.target\n\n    this.setState({//to set the state of forms key and value of the inputs\n      [name]: value,\n    })\n  }\n  submitForm = () => {\n    this.props.handleSubmit(this.state)\n    this.setState(this.initialState)\n  }\n\n  render() {\n    const { name, job } = this.state;\n\n    return (\n      <form>\n        <label htmlFor=\"name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          value={name}\n          onChange={this.handleChange} />\n        {/* call handle change method */}\n        <label htmlFor=\"job\">Job</label>\n        <input\n          type=\"text\"\n          name=\"job\"\n          id=\"job\"\n          value={job}\n          onChange={this.handleChange} />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n    );\n\n  }\n\n}\nexport default Form;","import React, { Component } from 'react';\nimport Table from './Table.js';\nimport Form from './Form';\n\nclass App extends Component {\n  state = {//The state object is where you store property values that belongs to the component.\n    characters: [],\n  };\n  //method to remove enterd data on page\n  removeCharacter = index => {\n    const { characters } = this.state;\n\n    this.setState({//use this.setState to modify an array.\n      //filter method can create a new array and put elements  that passed a condition into the array\n      characters: characters.filter((character, i) => {\n        return i !== index;\n      })\n    });\n  }\n  //this will update the state by taking the existing this.state.characters and adding the new character parameter\n  //... Spread syntax (...) allows an iterable such as an array expression or string to be expanded in places\n  // where zero or more arguments (for function calls) or elements (for array literals) are expected,\n  // or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected. \n  handleSubmit = (character) => {\n    this.setState({ characters: [...this.state.characters, character] })\n  }\n\n  //method\n  render() {\n    const { characters } = this.state;\n    return (\n      <div className=\"container\">\n        <Table characterData={characters} removeCharacter={this.removeCharacter} />\n        <Form handleSubmit={this.handleSubmit} />\n      </div>\n    );\n\n  }\n\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n//render the \"App\" to the root as before \nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}